openapi: 3.0.3
info:
  title: Lists API
  description: API for managing lists in the mobile-first PWA
  version: 1.0.0

paths:
  /lists:
    get:
      summary: Get user's lists
      description: Retrieve all lists owned by or shared with the authenticated user
      responses:
        '200':
          description: List of lists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/List'
        '401':
          description: Unauthorized

    post:
      summary: Create a new list
      description: Create a new list for the authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListRequest'
      responses:
        '201':
          description: List created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: User has reached list limit (10)

  /lists/{listId}:
    get:
      summary: Get a specific list
      description: Retrieve a specific list with its items
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List with items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWithItems'
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: List not found

    put:
      summary: Update a list
      description: Update list metadata (title, type)
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateListRequest'
      responses:
        '200':
          description: List updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: List not found

    delete:
      summary: Delete a list
      description: Permanently delete a list and all its items
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: List deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Only list owner can delete
        '404':
          description: List not found

  /lists/{listId}/items:
    get:
      summary: Get list items
      description: Retrieve all items for a specific list
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: List not found

    post:
      summary: Create a new item
      description: Add a new item to the list
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateItemRequest'
      responses:
        '201':
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Access denied or item limit reached (100)
        '404':
          description: List not found

  /lists/{listId}/items/{itemId}:
    put:
      summary: Update an item
      description: Update item content, completion status, or order
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateItemRequest'
      responses:
        '200':
          description: Item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Item or list not found

    delete:
      summary: Delete an item
      description: Remove an item from the list
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Item deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Item or list not found

  /lists/{listId}/share:
    post:
      summary: Share a list
      description: Create a sharing link for the list
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareListRequest'
      responses:
        '201':
          description: Share created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Share'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Only list owner can share
        '404':
          description: List not found

  /lists/{listId}/shares:
    get:
      summary: Get list shares
      description: Retrieve all active shares for a list
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of shares
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Share'
        '401':
          description: Unauthorized
        '403':
          description: Only list owner can view shares
        '404':
          description: List not found

    delete:
      summary: Revoke all shares
      description: Revoke all sharing access for a list
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: All shares revoked successfully
        '401':
          description: Unauthorized
        '403':
          description: Only list owner can revoke shares
        '404':
          description: List not found

components:
  schemas:
    List:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        type:
          type: string
          enum: [simple, grocery, countdown]
        title:
          type: string
          maxLength: 100
        is_private:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - user_id
        - type
        - title
        - is_private
        - created_at
        - updated_at

    ListWithItems:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Item'
          required:
            - items

    Item:
      type: object
      properties:
        id:
          type: string
          format: uuid
        list_id:
          type: string
          format: uuid
        content:
          type: string
          maxLength: 500
        is_completed:
          type: boolean
        target_date:
          type: string
          format: date-time
          nullable: true
        sort_order:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - list_id
        - content
        - is_completed
        - sort_order
        - created_at
        - updated_at

    Share:
      type: object
      properties:
        id:
          type: string
          format: uuid
        list_id:
          type: string
          format: uuid
        shared_with_email:
          type: string
          format: email
        role:
          type: string
          enum: [read, edit]
        created_by:
          type: string
          format: uuid
        expires_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
      required:
        - id
        - list_id
        - shared_with_email
        - role
        - created_by
        - expires_at
        - created_at

    CreateListRequest:
      type: object
      properties:
        type:
          type: string
          enum: [simple, grocery, countdown]
        title:
          type: string
          maxLength: 100
          minLength: 1
      required:
        - type
        - title

    UpdateListRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 100
          minLength: 1
      required:
        - title

    CreateItemRequest:
      type: object
      properties:
        content:
          type: string
          maxLength: 500
          minLength: 1
        target_date:
          type: string
          format: date-time
          nullable: true
        sort_order:
          type: integer
      required:
        - content
        - sort_order

    UpdateItemRequest:
      type: object
      properties:
        content:
          type: string
          maxLength: 500
          minLength: 1
        is_completed:
          type: boolean
        target_date:
          type: string
          format: date-time
          nullable: true
        sort_order:
          type: integer

    ShareListRequest:
      type: object
      properties:
        shared_with_email:
          type: string
          format: email
        role:
          type: string
          enum: [read, edit]
      required:
        - shared_with_email
        - role

  securitySchemes:
    supabaseAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - supabaseAuth: []